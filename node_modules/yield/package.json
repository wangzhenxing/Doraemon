{
  "name": "yield",
  "version": "0.0.6-8",
  "description": "library providing functional helpers for generators",
  "main": "index.js",
  "keywords": [
    "yield",
    "infinite",
    "sequence",
    "generator",
    "functional"
  ],
  "devDependencies": {
    "tape": "~1.0.2",
    "tap-harmony": "~0.4.3"
  },
  "scripts": {
    "test": "tap-harmony --strict --harmony test/*.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/ttaubert/yield-js.git"
  },
  "homepage": "https://github.com/ttaubert/yield-js",
  "author": {
    "name": "Tim Taubert",
    "email": "tim@timtaubert.de",
    "url": "http://timtaubert.de/"
  },
  "license": "MIT",
  "readme": "# yield.js\n\nlibrary providing functional helpers for generators\n\n[![build status](https://secure.travis-ci.org/ttaubert/yield-js.png)](http://travis-ci.org/ttaubert/yield-js)\n\nPlease note that this module currently requires node.js v0.11.2 (or higher)\nstarted with `--use-strict` and `--harmony` as it makes heavy use of generators,\nsets and block-scoped variables.\n\n# example\n\n``` js\n// Generator containing the sequence of natural numbers.\nfunction* nat() {\n  let i = 1;\n  while (true) {\n    yield i++;\n  }\n}\n\n// Sequence of all Mersenne numbers.\nfunction mersenneNumbers() {\n  return y.map(nat(), function (x) { return Math.pow(2, x) - 1 });\n}\n\n// Sequence of all Mersenne numbers that are prime.\nfunction mersennePrimes() {\n  function isPrime(n) {\n    return y.every(y.range(2, n - 1), function (x) { return n % x });\n  }\n\n  return y.filter(y.drop(mersenneNumbers(), 1), isPrime);\n}\n\ny.toArray(y.take(mersennePrimes(), 3)); // [3, 7, 31];\n```\n\n# methods\n\n## fromArray(arr)\n\nUtility function that creates a generator from a given array `arr`.\n\n``` js\nlet g = y.fromArray([1, 2]);\nyole.log(g.next().value, g.next().value); // prints 1 2\n```\n\n## toArray(it)\n\nUtility function that yumes the whole sequence `it` and returns an array\ncontaining all of its values.\n\n``` js\nfunction* g() {\n  yield 1;\n  yield 2;\n  yield 3;\n}\n\ny.toArray(g()); // [1, 2, 3]\n```\n\n## range(from, to)\n\nCreates a generator containing an arithmetic progression starting with the value\n`from` up to including value `to`.\n\n``` js\ny.toArray(y.range(1, 3)); // [1, 2, 3]\n```\n\n## map(it, fun)\n\nCreates a generator containing the results of applying `fun` to all values of\n`it`.\n\n``` js\nfunction square(x) {\n  return x * x;\n}\n\ny.toArray(y.map(y.range(1, 3), square)); // [1, 4, 9]\ny.toArray(y.map([-1, -2, -3], square)); // [1, 4, 9]\n```\n\n## filter(it, p)\n\nCreates a generator containing values of `it` where the predicate `p` holds.\n\n``` js\nfunction odd(x) {\n  return x % 2;\n}\n\ny.toArray(y.filter(y.range(1, 6), odd)); // [1, 3, 5]\ny.toArray(y.filter([1, 2, 3, 4], odd)); // [1, 3]\n```\n\n## reject(it, p)\n\nCreates a generator containing values of `it` where the predicate `p` does\nnot hold.\n\n``` js\nfunction odd(x) {\n  return x % 2;\n}\n\ny.toArray(y.reject(y.range(1, 6), odd)); // [2, 4, 6]\ny.toArray(y.reject([1, 2, 3, 4], odd)); // [2, 4]\n```\n\n## compact(it)\n\nCreates a generator containing all truthy values of `it`.\n\n``` js\ny.toArray(y.compact(y.range(-1, 1))); // [-1, 1]\ny.toArray(y.compact([1, \"\", 2, 0, true, false])); // [1, 2, true]\n```\n\n## reduce(it, fun)\n\nConsumes the whole sequence `it` and reduces all of its values down to a single\nvalue. `fun` is called on each step with the current reduction state and value\nas arguments.\n\n``` js\nfunction sum(it) {\n  return y.reduce(it, function (acc, x) { return acc + x }, 0);\n}\n\nsum([2, 3, 4]); // 9\nsum(y.range(1, 3)); // 6\nsum(y.range(-1, 1)); // 0\n```\n\n## each(it, fun)\n\nConsumes the whole sequence `it` calling the given function `fun` for every\nvalue, passing the value as a single argument.\n\n``` js\n// Show alert boxes for numbers 1 to 3.\ny.each(y.range(1, 3), alert);\ny.each([1, 2, 3], alert);\n```\n\n## min(it)\n\nConsumes the whole sequence `it` and returns the minimum value found or\n`+Infinity` for empty sequences.\n\n``` js\ny.min(y.range(1, 6)); // 1\ny.min([5, 1, 7]); // 1\n```\n\n## max(it)\n\nConsumes the whole sequence `it` and returns the maximum value found or\n`-Infinity` for empty sequences.\n\n``` js\ny.max(y.range(1, 6)); // 6\ny.max([5, 1, 7]); // 7\n```\n\n## uniq(it)\n\nReturns a generator containing all distinct values from the given sequence `it`.\n\n``` js\nfunction mod3(x) {\n  return x % 3;\n}\n\ny.uniq(y.map(y.range(1, 9), mod3)); // [1, 2, 0]\ny.uniq(['a', 'b', 'a', 'c']); // ['a', 'b', 'c']\n```\n\n## every(it, p)\n\nReturns `true` if the given predicate `p` holds for all values of the given\nsequence `it`. Returns `true` as well for empty sequences.\n\n``` js\nfunction greaterThanZero(x) {\n  return x > 0;\n}\n\ny.every(y.range(1, 5), greaterThanZero); // true\ny.every([0, 1, 2, 3, 4], greaterThanZero); // false\ny.every([], greaterThanZero); // true\n```\n\n## some(it, p)\n\nReturns `true` if the given predicate `p` holds for at least one value of the\ngiven sequence `it`. Returns `false` for empty sequences.\n\n``` js\nfunction equalToZero(x) {\n  return x === 0;\n}\n\ny.some(y.range(1, 5), equalToZero); // false\ny.some([0, 1, 2, 3, 4], equalToZero); // true\ny.some([], equalToZero); // false\n```\n\n## size(it)\n\nConsumes the whole sequence `it` and returns the number of values found.\n\n``` js\ny.size(y.range(1, 5)); // 5\ny.size([1, 2, 3]); // 3\n```\n\n## contains(it, val)\n\nReturns `true` if the given value `val` is contained in the given sequence `it`,\n`false` otherwise.\n\n``` js\ny.contains(y.range(0, 5), 0); // true\ny.contains([1, 2, 3, 4, 5], 0); // false\n```\n\n## find(it, p)\n\nReturns the first value of the given sequence `it` for which the given predicate\n`p` holds.\n\n``` js\nfunction greaterThanThree(x) {\n  return x > 3;\n}\n\ny.find(y.range(1, 6), greaterThanThree); // 4\ny.find([3, 4, 5], greaterThanThree); // 4\ny.find([], greaterThanThree); // undefined\n```\n\n## take(it, num)\n\nReturns a generator containing the first `num` values from the given sequence\n`it`.\n\n``` js\ny.take(y.range(1, 6), 3); // [1, 2, 3]\ny.take([1, 2, 3], 2); // [1, 2]\n```\n\n## drop(it, num)\n\nReturns a generator containing all but the first `num` values from the given\nsequence `it`.\n\n``` js\ny.drop(y.range(1, 6), 3); // [4, 5, 6]\ny.drop([1, 2, 3], 1); // [2, 3]\n```\n\n## flatten(it)\n\nFlattens the given (nested) sequence `it`.\n\n``` js\nfunction* g() {\n  yield 1;\n  yield 2;\n  yield [3, 4];\n}\n\ny.flatten([0, g()]); // [0, 1, 2, 3, 4]\ny.flatten([1, [2], [3, [[4]]]]); // [1, 2, 3, 4]\n```\n\n## flattenOnce(it)\n\nFlattens the given (nested) sequence `it` by a single level.\n\n``` js\ny.flattenOnce([1, [2], [3, [[4]]]]); // [1, 2, 3, [[4]]]\n```\n\n## flatMap(it, fun)\n\nCreates a generator by applying `fun` to all values of `it` and using the\nelements of the resulting sequences.\n\n``` js\nfunction map(x) {\n  return [x, x];\n}\n\ny.flatMap(y.range(1, 3), map); // [1, 1, 2, 2, 3, 3]\ny.flatMap([1, 2, 3], map); // [1, 1, 2, 2, 3, 3]\ny.flatMap([1, [2]], map); // [1, 1, [2], [2]]\n```\n\n## union(it [, it2, ...])\n\nCreates a generator containing the union of all passed sequences.\n\n``` js\ny.union(y.range(1, 3), [2, 3, 4], y.range(1, 6)); // [1, 2, 3, 4, 5, 6]\n```\n\n## difference(it, oth [, oth2, ...])\n\nCreates a generator containing all values of `it` that are not contained in\n`oth` and all further given sequences.\n\n``` js\ny.difference(y.range(1, 6), [3, 4], y.range(1, 2)); // [5, 6]\n```\n\n## without(it, val [, val2, ...])\n\nCreates a generator containing all values of `it` that do not match `val` or\nany other of the given values.\n\n``` js\ny.without(y.range(1, 6), 1, 2); // [3, 4, 5, 6]\ny.without([1, 2, 3, 4], 1, 2); // [3, 4]\n```\n\n## partition(it, p)\n\nPartitions the given sequence `it` according to the given predicate `p`. It\nreturns an array with the first entry containing a generator with all values of\n`it` for which the predicate `p` holds. The second entry will contain a\ngenerator with all values for which the predicate does not hold.\n\n``` js\nfunction greaterThanThree(x) {\n  return x > 3;\n}\n\ny.partition(y.range(1, 6), greaterThanThree); // [[4, 5, 6], [1, 2, 3]]\ny.partition([2, 3, 4, 5], greaterThanThree); // [[4, 5], [2, 3]]\n```\n\n# install\n\nFor node.js, with [npm](https://npmjs.org) do:\n\n```\nnpm install yield\n```\n\n# todos\n\n* Use [yield*](http://wiki.ecmascript.org/doku.php?id=harmony:generators#delegating_yield) when implemented.\n* Use [for...of](https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Statements/for...of) when implemented.\n* Use [rest parameters](http://wiki.ecmascript.org/doku.php?id=harmony:rest_parameters) when implemented.\n\n# license\n\nMIT\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/ttaubert/yield-js/issues"
  },
  "_id": "yield@0.0.6-8",
  "dist": {
    "shasum": "e67e33c6225d1d83c4517582dee4269d6d0049f0",
    "tarball": "http://registry.npmjs.org/yield/-/yield-0.0.6-8.tgz"
  },
  "_from": "yield@*",
  "_npmVersion": "1.2.21",
  "_npmUser": {
    "name": "ttaubert",
    "email": "tim@timtaubert.de"
  },
  "maintainers": [
    {
      "name": "ttaubert",
      "email": "tim@timtaubert.de"
    }
  ],
  "directories": {},
  "_shasum": "e67e33c6225d1d83c4517582dee4269d6d0049f0",
  "_resolved": "https://registry.npmjs.org/yield/-/yield-0.0.6-8.tgz"
}
